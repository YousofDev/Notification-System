name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch: # Allows manual triggering

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/notification-system

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      mongo:
        image: mongo:6
        ports:
          - 27017:27017
      rabbitmq:
        image: rabbitmq:3-management
        ports:
          - 5672:5672
          - 15672:15672
        options: >-
          --health-cmd "rabbitmq-diagnostics -q ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Build application
        run: pnpm run build

      - name: Create .env file
        run: |
          cat <<EOF > .env
          PORT=${{ secrets.PORT }}
          NODE_ENV=${{ secrets.NODE_ENV }}
          LOG_LEVEL=${{ secrets.LOG_LEVEL }}
          CORS_ORIGINS=${{ secrets.CORS_ORIGINS }}
          MONGO_URI=mongodb://localhost:27017/notifications_db
          RABBITMQ_URI=amqp://guest:guest@localhost:5672
          API_KEYS=${{ secrets.API_KEYS }}
          SMTP_HOST=${{ secrets.SMTP_HOST }}
          SMTP_PORT=${{ secrets.SMTP_PORT }}
          SMTP_SECURE=${{ secrets.SMTP_SECURE }}
          SMTP_USER=${{ secrets.SMTP_USER }}
          SMTP_PASS=${{ secrets.SMTP_PASS }}
          RABBITMQ_EMAIL_QUEUE=${{ secrets.RABBITMQ_EMAIL_QUEUE }}
          RABBITMQ_WEBSOCKET_QUEUE=${{ secrets.RABBITMQ_WEBSOCKET_QUEUE }}
          RABBITMQ_DLQ_EMAIL=${{ secrets.RABBITMQ_DLQ_EMAIL }}
          RABBITMQ_DLQ_WEBSOCKET=${{ secrets.RABBITMQ_DLQ_WEBSOCKET }}
          RABBITMQ_DLX_EMAIL=${{ secrets.RABBITMQ_DLX_EMAIL }}
          RABBITMQ_DLX_WEBSOCKET=${{ secrets.RABBITMQ_DLX_WEBSOCKET }}
          EMAIL_RATE_LIMIT_MAX=${{ secrets.EMAIL_RATE_LIMIT_MAX }}
          EMAIL_RATE_LIMIT_WINDOW_MS=${{ secrets.EMAIL_RATE_LIMIT_WINDOW_MS }}
          WS_RATE_LIMIT_MAX=${{ secrets.WS_RATE_LIMIT_MAX }}
          WS_RATE_LIMIT_WINDOW_MS=${{ secrets.WS_RATE_LIMIT_WINDOW_MS }}
          EOF

      - name: Run tests
        run: pnpm run test

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: production

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx (includes Docker Compose setup)
        uses: docker/setup-buildx-action@v3

      - name: Pull latest Docker image
        run: docker pull ${{ env.IMAGE_NAME }}:latest

      - name: Stop existing containers
        run: |
          docker compose down --remove-orphans || true
          docker system prune -f

      - name: Start services
        run: |
          echo "PORT=${{ secrets.PORT }}" > .env
          echo "NODE_ENV=${{ secrets.NODE_ENV }}" >> .env
          echo "LOG_LEVEL=${{ secrets.LOG_LEVEL }}" >> .env
          echo "CORS_ORIGINS=${{ secrets.CORS_ORIGINS }}" >> .env

          echo "MONGO_URI=${{ secrets.MONGO_URI }}" >> .env
          echo "RABBITMQ_URI=${{ secrets.RABBITMQ_URI }}" >> .env

          echo "API_KEYS=${{ secrets.API_KEYS }}" >> .env

          echo "SMTP_HOST=${{ secrets.SMTP_HOST }}" >> .env
          echo "SMTP_PORT=${{ secrets.SMTP_PORT }}" >> .env
          echo "SMTP_SECURE=${{ secrets.SMTP_SECURE }}" >> .env
          echo "SMTP_USER=${{ secrets.SMTP_USER }}" >> .env
          echo "SMTP_PASS=${{ secrets.SMTP_PASS }}" >> .env

          echo "RABBITMQ_EMAIL_QUEUE=${{ secrets.RABBITMQ_EMAIL_QUEUE }}" >> .env
          echo "RABBITMQ_WEBSOCKET_QUEUE=${{ secrets.RABBITMQ_WEBSOCKET_QUEUE }}" >> .env
          echo "RABBITMQ_DLQ_EMAIL=${{ secrets.RABBITMQ_DLQ_EMAIL }}" >> .env
          echo "RABBITMQ_DLQ_WEBSOCKET=${{ secrets.RABBITMQ_DLQ_WEBSOCKET }}" >> .env
          echo "RABBITMQ_DLX_EMAIL=${{ secrets.RABBITMQ_DLX_EMAIL }}" >> .env
          echo "RABBITMQ_DLX_WEBSOCKET=${{ secrets.RABBITMQ_DLX_WEBSOCKET }}" >> .env

          echo "EMAIL_RATE_LIMIT_MAX=${{ secrets.EMAIL_RATE_LIMIT_MAX }}" >> .env
          echo "EMAIL_RATE_LIMIT_WINDOW_MS=${{ secrets.EMAIL_RATE_LIMIT_WINDOW_MS }}" >> .env
          echo "WS_RATE_LIMIT_MAX=${{ secrets.WS_RATE_LIMIT_MAX }}" >> .env
          echo "WS_RATE_LIMIT_WINDOW_MS=${{ secrets.WS_RATE_LIMIT_WINDOW_MS }}" >> .env

          docker compose --env-file .env up -d
